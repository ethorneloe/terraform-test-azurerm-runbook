name: "terraform-analyze-and-plan"
description: "Initialize, validate, inspect and plan Terraform configurations."
inputs:
  client_id:
    description: "Azure Client ID"
    required: true
  subscription_id:
    description: "Azure Subscription ID"
    required: true
  tenant_id:
    description: "Azure Tenant ID"
    required: true
  resource_group_name:
    description: "Resource Group Name for Terraform backend"
    required: true
  storage_account_name:
    description: "Storage Account Name for Terraform backend"
    required: true
  container_name:
    description: "Container Name for Terraform backend"
    required: true
  backend_key:
    description: "Key for the Terraform state file in the backend"
    required: true
  working_directory:
    description: "Working directory for Terraform configurations"
    required: true
  plan_file_name:
    description: "Name of the Terraform plan file"
    required: true
  tfvars_file:
    description: "Name of the Terraform variables file"
    required: false
  terraform_version:
    description: "Version of Terraform to use"
    required: true
    default: "1.9.5"
  sops_config_file:
    description: "Name of the SOPS configuration file"
    required: false
  artifact_base_name:
    description: "Base name for the plan artifacts"
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Environment Variables
      run: |
        # Setup Environment Variables
        echo "ARM_CLIENT_ID=${{ inputs.client_id }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ inputs.subscription_id }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ inputs.tenant_id }}" >> $GITHUB_ENV
      shell: bash

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform Init
      working-directory: ${{ inputs.working_directory }}
      run: |
        # terraform init
        set -x
        terraform init -input=false \
          -backend-config="resource_group_name=${{ inputs.resource_group_name }}" \
          -backend-config="storage_account_name=${{ inputs.storage_account_name }}" \
          -backend-config="container_name=${{ inputs.container_name }}" \
          -backend-config="key=${{ inputs.backend_key }}"
      shell: bash

    - name: Terraform Validate
      working-directory: ${{ inputs.working_directory }}
      run: |
        # terraform validate
        terraform validate
      shell: bash

    - name: Run Trivy vulnerability scanner in IaC mode
      uses: aquasecurity/trivy-action@0.20.0
      with:
        scan-type: "config"
        hide-progress: true
        format: "sarif"
        output: "trivy-results.sarif"
        exit-code: "1"
        ignore-unfixed: true
        severity: "CRITICAL,HIGH"

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: "trivy-results.sarif"

    - name: Terraform Plan
      working-directory: ${{ inputs.working_directory }}
      run: |
        if [ -n "${{ inputs.tfvars_file }}" ]; then
          echo "Using tfvars file: ${{ inputs.tfvars_file }}"
          terraform plan -input=false -out="${{ inputs.plan_file_name }}" -var-file="${{ inputs.tfvars_file }}" -no-color >  "${{ inputs.plan_file_name }}.txt"
        else
          terraform plan -input=false -out="${{ inputs.plan_file_name }}" -no-color >  "${{ inputs.plan_file_name }}.txt"
        fi
      shell: bash

    - name: Install SOPS
      if: ${{ inputs.sops_config_file }}
      uses: mdgreenwald/mozilla-sops-action@v1.6.0
      id: install

    - name: Encrypt Files Conditionally
      if: ${{ inputs.sops_config_file }}
      run: |
        sops --config ${{ inputs.sops_config_file }} --encrypt ${{ inputs.working_directory }}/${{ inputs.plan_file_name }} > ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}.enc
        sops --config ${{ inputs.sops_config_file }} --encrypt ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}.txt > ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}.txt.enc
      shell: bash

    - name: Upload Plan Files
      if: ${{ inputs.sops_config_file == ''}}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_base_name}}
        path: ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}

    - name: Upload Plan Text Files
      if: ${{ inputs.sops_config_file == ''}}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_base_name}}-txt
        path: ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}.txt

    - name: Upload Encrypted Plan Files
      if: ${{ inputs.sops_config_file }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_base_name}}-enc
        path: ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}.enc

    - name: Upload Encrypted Plan Text Files
      if: ${{ inputs.sops_config_file }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_base_name}}-txt-enc
        path: ${{ inputs.working_directory }}/${{ inputs.plan_file_name }}.txt.enc
